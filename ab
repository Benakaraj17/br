Insertion Sort - Part 1
 int j = ar_size-1;
    int v = ar[j];
    while(v < ar[j-1]) {
        ar[j] = ar[j-1];
        j--;
        print(ar_size, ar);
    }
    ar[j] = v;
    print(ar_size, ar);

Insertion Sort - Part 2

 for (int i = 1; i < ar_size; ++i) {
        int j = i - 1;
        int p = ar[i];
        while (j >= 0 && p < ar[j]) {
            ar[j+1] = ar[j];
            j--;
        }
        ar[j+1] = p;
        printf("%d", ar[0]);
        for (int k = 1; k < ar_size; ++k) {
            printf(" %d", ar[k]);
        }
        printf("\n");
    }


Correctness and the Loop Invariant

int i,j;
    int value;
    for(i=1;i<ar_size;i++)
    {
        value=ar[i];
        j=i-1;
        while(j>=0 && value<ar[j])
        {
            ar[j+1]=ar[j];
            j=j-1;
        }
        ar[j+1]=value;        
    }
    for(j=0;j<ar_size;j++)
        {
            printf("%d",ar[j]);
            printf(" ");
        }


Running Time of Algorithms
int temp=ar[ar_size-1],i;
    for(i=ar_size-2;i>=0;i--)
    {
        if(ar[i]>temp){ 
ar[i+1]=ar[i];
*shifts=*shifts+1;
}
        else 
break;
        
    }
    ar[i+1]=temp;

 Counting Sort 1
scanf("%d",&n);
   
    for(i=0;i<100;i++)
    {   
         b[i]=0;
    }
    for(i=0;i<n;i++)
    {    
        scanf("%d",&a);
         b[a]++;
    }
    for(i=0;i<100;i++)
    {   
        printf("%d ", b[i]);
    }
   
    return 0;
}


The Power Sum
int tmp = pow(m,p);
    if(tmp == n) return 1;
    if(tmp > n) return 0;
 return the_power_sum(n,m+1,p) + the_power_sum(n-tmp, m+1,p);


Counter Game
scanf("%d",&t);
    for(i=0;i<t;++i)
        {
        win=0;
        scanf("%lu",&n);
        if(n==1)
            printf("Richard\n");
        else
            {
            while(n!=1)
                {
                if(isPow2(n))
                    n>>=1;
                else
                    n-=largePow(n);
                ++win;
            }
        }
        if(win%2==0)
            printf("Richard\n");
        else
            printf("Louise\n");
    }
    return 0;
}
int isPow2(long unsigned int n)
    {
    return !(n&(n-1));
}


Sherlock and Cost
 X = L - 1 + ML;
                Y = R - 1 + MR;
                P = abs(L - B) + ML;
                Q = abs(R - B) + MR;
                ML = (X > Y ? X : Y);
                MR = (P > Q ? P : Q);
            } else {
                ML = MR = 0;
            }


Marc's Cakewalk
     quicksort(x,start,i-1);
      quicksort(x,i+1,end);
    quicksort(calories,0,n-1);
    
    for(i=0;i<n;i++)
    {
        sum += calories[i]*((int)pow(2,i));
    }    
    printf("%d",sum);


password
    int L_c = 0;
    int U_c = 0;
    int no = 0;
    int s_c = 0;
    
    int len = strlen(password);
    int i;
    for(i = 0; i<n; i++)
    {
        if(password[i] >= 'a' && password[i] <= 'z')
            L_c++;
        else if(password[i] >= 'A' && password[i] <= 'Z')
            U_c++;
        else if(password[i] >= '0' && password[i] <= '9')
            no++;
        else
            s_c++;
    }
    
    int add = 0;
    if(L_c == 0)
        add++;
    if(U_c == 0)
        add++;
    if(no == 0)
        add++;
    if(s_c == 0)
        add++;
    
    len = len + add;
    
    if(len < 6)
        add = add + 6 - len;
    
    return add;
}


Caesar Cipher
       x=ar[i];
        if(x>=97 && x<=122)
        {
            x=x+(k%26);
            if(x>122)
            {
                x=96+(x-122);
            }
            ar[i]=x;
        }
        else if(x>=65 && x<=90)
        {
            x=x+(k%26);
            if(x>90)
            {
                x=64+(x-90);
            }
            ar[i]=x;
        }


Pangrams
        if(s[i]==' ')
            continue;
        if(s[i]>='a')
            s[i]=s[i]-('a'-'A');
        if(!(f[s[i]]++))
            ans++;


Prefix Sum Array
	int i;
	for (i = 1; i<n; i++)
	{
		arr[i] = arr[i] + arr[i-1];
	}
}

void sum(int arr[], int n, int a, int b){
	int result;
	if (a == 0)
		result = arr[b];
	else
		result = arr[b] - arr[a-1];
	printf("The sum is %d", result);
}


Fenwick Tree Construction
int sum(int arr[], int n, int a, int b){
	int i, sum=0;
	for (i = a; i<=b; i++)
	{
		sum += arr[i] ;
	}
	return sum;
void create_fenwick_tree(int T[], int arr[], int n)
{
	int a, b, k;
	for (k=1; k<=n; k++)
	{
		a = k â€“ (k&-k) +1;
		b = k;
		T[k] = sum(arr,n,a,b);
	}

}


Fenwick Tree - Sum of Elements
int s = 0;
while (k >= 1) {
s += T[k];
k -= k&-k;
}
printf("\n The sum is %d",s) ;

