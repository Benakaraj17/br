Closest Numbers
quickSort(a,0,n-1);
	
	//finding smallest
	int min=a[1]-a[0];
	for(i=2;i<n;i++)
		if(a[i]-a[i-1]<min) min=a[i]-a[i-1];
	
	//printing all pairs
	for(i=1;i<n;i++)
		if(a[i]-a[i-1]==min) printf("%d %d ",a[i-1],a[i]);
	printf("\n");


Ice Cream Parlor
        scanf("%d%d",&c,&l);
        for(i=0;i<l;i++)
        scanf("%d",&arr[i]);
        for(i=0;i<l-1;i++)
        for(j=i+1;j<l;j++)
        {
            if(arr[i]+arr[j]==c)
            printf("%d %d\n",i+1,j+1);
        }



Maximizing XOR
    int max = 0,i,j;
    for(i=l;i<r;i++)
        for(j=i+1;j<=r;j++)
            max = max<(i^j)?i^j:max;
    return max;



Sum vs XOR
	while(n>0){
		if(n%2==0)m*=2;
		n/=2;
	}
	printf("%lld\n",m);



Flipping Bits

    scanf("%d", &t);
    while(t-- > 0) {
        scanf("%u", &n);
        printf("%u\n", ~n);
    }


Mark and ToysMark and Toys
scanf("%d",&n);
scanf("%d",&k);
for(i=0;i<n;i++)
scanf("%d",&cost[i]); 
quicksort(cost,0,n-1);
while(avail<=k)
{
avail+=cost[count]; 
count++;
}  
printf("%d\n",count-1);    


Greedy Florist

int a[200],i,j,k,l,sum,n;

sum = 0;
for(i=0;i<n;i++) 
  sum+= a[i]*(1+i/k);
printf("%d\n",sum);



Camelcase
    scanf("%s",s);
    int count=0,i;
    for(i=0;i<strlen(s);i++)
    {
        if(s[i]>=65 && s[i]<=90)
            {
               count++;
            }
    }
    printf("%d\n",count+1);



Mars Exploration
    for(i=0;S[i]!='\0';i+=3){
        if(S[i]!='S'){
            count++;
        }
        if(S[i+1]!='O'){
            count++;
        }
        if(S[i+2]!='S'){
            count++;
        }
    }



Funny String
        funny = 1;
        for(i=1, r=N-2; i<N; i++, r--) {
            if (fabs(S[i]-S[i-1]) != fabs(S[r]-S[r+1])) {
                funny = 0;
                break;
            }
        }
        if (funny)
        {
        	printf("funny");
		}
		else
		printf("not funny");



Alternating Characters
    while(t--)
    {
        scanf("%s",c);
        for(i=0; c[i] != ‘\0’; i++)
        {
            if(c[i]==c[i+1])
            {
                count++;
            }
        }



Beautiful Binary String
        if(B[i]=='0'&&B[i+1]=='1'&&B[i+2]=='0'){
         B[i+2]='1';
         count++;
        }
        i++;



Fenwick Tree – Add a value
while (k <= n) {
T[k] += x;
k += k&-k;
}
display(T,n);


	printf("\n Enter the position and value to be increased ");
	scanf("%d%d",&k,&x);
            add(T,n, k, x);



